\section{An Overview of System \name}

% \bruno{mention (and cite) that there are a number of OO languages supporting
% intersection types }
%\george{Change the examples later to something very simple.}
%\bruno{Mention that we use some syntactic sugar, which is part 
%of our implementation.}

This section provides the reader with the necessary intuition for
\name by informally introducing the main features of the language.
The features of \name are also contrasted with features of mainstream
languages such as Java or Scala. Note that this section uses some 
common syntactic sugar in programming languages, which is 
part of our implementation of System \name.
 
%will do so by introducing a simple source language, which will be used in
%Section~\ref{sec:application}. \george{From the practice of similar papers, I
% think a figure listing the source syntax is neccessary.}

\subsection{Intersection Types in Existing Languages}

A number of OO languages, such as Java, C\#, Scala, and
Ceylon\footnote{\url{http://ceylon-lang.org/}}, already support intersection
types to different degrees. In Java, for example,

\begin{lstlisting}
interface AwithB extends A, B 
\end{lstlisting}

\noindent introduces a new interface \lstinline{AwithB} that satisfies the interfaces of
both \lstinline{A} and \lstinline{B}. Arguably such type can be considered as a nominal
intersection type. Scala takes one step further by eliminating the
need of a nominal type. For example, given two concrete traits, it is possible to
use \emph{mixin composition} to create an object that implements both 
traits. Such an object has a (structural) intersection type:

\begin{lstlisting}
trait A
trait B

val newAB : A with B = new A with B
\end{lstlisting}

\noindent Scala also allows intersection of type parameters. For example:
\begin{lstlisting}
def merge[A,B] (x: A) (y: B) : A with B = ...
\end{lstlisting}
uses the annonymous intersection of two type parameters \lstinline{A} and
\lstinline{B}. However, in Scala it is not possible to dynamically
compose two objects. For example, the following code:

\begin{lstlisting}
// Invalid Scala code:
def merge[A,B] (x: A) (y: B) : A with B = x with y
\end{lstlisting}

\noindent is rejected by the Scala compiler. The problem is that the
\lstinline{with} construct for Scala expressions can only be used to
mixin traits or classes, and not arbitrary objects. Note that in the 
definition \lstinline{newAB} both \lstinline{A} and \lstinline{B} are
\emph{traits}, whereas in the definition of \lstinline{merge} the variables 
\lstinline{x} and \lstinline{y} denote \emph{objects}. 

\begin{comment}
A common limitation in those languages, though, is that there is no introduction
construct at the term level for intersection types. In Java and Scala, we cannot
create an instance of class type \lstinline{A & B} with
\begin{lstlisting}
  new A() & B()
\end{lstlisting}
\end{comment}

This limitation essentially put intersection types in Scala in a second-class
status. Although \lstinline{merge} returns an intersection type, it is
hard to actually build values with such types. In essense an
object-level introduction contruct for intersection types is missing.
As it turns out using low-level type-unsafe programming features such
as dynamic proxies, reflection or other meta-programming techniques,
it is possible to implement such an introduction
construct in Scala~\cite{oliveira2013feature,rendel14attributes}. However, this
is clearly a hack and it would be better to provide proper language
support for such a feature.

\begin{comment}
This is in 
contrast, there are term-level introduction construct for function types (with
lambdas) and universal quantification (with big lambdas) in most core
calculi.
\end{comment}

% The key constructs are the ``merge'' operator, denoted by $ \mergeop $
% at the term level and the corresponding type intersection operator, denoted by
% $ \andop $ at the type level.
% \bruno{We take a particular approach to intersection types, namely that of
% Dundfield. Some other approaches are different. The \emph{key feature} in
% Dunfield's approach is the $\mergeop$ operator, which allows for run-time
% value/object composition.}

% The addition of intersection types to System $ F $ has a number of consequences,
% which we will explore one by one in the following subsections.
% \bruno{Don't mention prototype-based inheritance in the summary, unless you
% are going to mention it later in the section. \emph{More generally don't
% mention things that you don't talk about later!}}.

\subsection{Intersection Types in \name}

% What is an intersection type? One classic view is from set-theoretic
% interpretation of types: $ A \andop B $ stands for the intersection of
% the set of values of $ A $ and $ B $. A more practical view, adopted in this
% paper, regards types as a kind of interface: a value of type
% $ A \andop B $ satisfies both of the interfaces of $ A $ and $ B $. For
% example, \lstinline{eval : Int} is the interface that supports evaluation to
% integers, while \lstinline{eval : Int & print : String } supports both
% evaluation and pretty printing. Those interfaces are akin to interfaces in
% Java or traits in Scala. But one key difference is that they are unnamed in
% \name.

To address the limitations of intersection types in languages like
Scala, \name allows intersecting any two terms at run time using a
\emph{merge} operator (denoted by $ \mergeop $)~\cite{dunfield2014elaborating}.  With the merge 
operator it is trivial to implement the \lstinline{merge} function in \name:

\begin{lstlisting}
let merge[A,B] (x : A) (y : B) : A & B = x ,, y;
\end{lstlisting}

\noindent In contrast to Scala's expression-level \lstinline{with}
construct, the operator \lstinline{,,} allows two arbitrary values \lstinline{x} 
and \lstinline{y} to be merged. The resulting type is an
intersection of the types of  \lstinline{x} 
and \lstinline{y} (\lstinline{A & B} in this case).

\begin{comment}
The following table
summarizes the extent of support for intersection types in Java,
Scala, and \name.

\hspace{-13pt}\begin{tabular}{ l | c | c | c  }
                                   & Java       & Scala      & \name      \\ \hline
  Basic intersection types         & \checkmark & \checkmark & \checkmark \\ \hline
  Anonymous intersection types     &            & \checkmark & \checkmark \\ \hline
  Intersection of type parameters  &            & \checkmark & \checkmark \\ \hline
  Term-level intersection          &            &            & \checkmark 
\end{tabular} \\
\end{comment}

%In \name the central addition to the type system of System $F$ are
%intersection types.

\paragraph{Intersection Types for Overloading} 
A typical use-case for intersection types is to do
\emph{overloading}. The benefit is that programmers can use the same
operation on different types and delegate the task of choosing a
concrete implementation to the type system. For example, we can define
a \lstinline{show} function that takes either an integer or a boolean
and returns its string representation. In other words, \lstinline{show} is also
\emph{both} a function from integers to strings as well as a function
from boolean to strings.  Therefore, in \name \lstinline{show} should be of
following type:
\begin{lstlisting}
show : (Int -> String) & (Bool -> String)
\end{lstlisting}
Assuming that the following two functions are available:
\begin{lstlisting}
showInt : Int  -> String 
showBool : Bool -> String
\end{lstlisting}

\noindent The overloaded \lstinline{show} function is defined by
merging the \lstinline{showInt} and \lstinline{showBool} using the
merge operator:

\begin{lstlisting}
let show = showInt ,, showBool;
\end{lstlisting}
% \bruno{This is not a proper sentence. Polish text.}

To illustrate the usage, consider the function application \lstinline{show 100}.
The type system will pick the first component of \lstinline{show}, namely
\lstinline{showInt}, as the implementation being applied to \lstinline{100}
because the type of \lstinline{showInt} is compatible with \lstinline{100}, but
\lstinline{showBool} is not. This example shows that one may regard
intersections in our system as ``implicit pairs'' whose introduction is explicit
by the merge operator and elimination is implicit (with no source-level
construct for elimination).

% The merge construct in the original function is elaborated into a pair in the
% target language:

% \begin{verbatim}
% show = (showInt, showBool)
% \end{verbatim}

% In the target language where there is no intersection types, the application
% of the integer \texttt{1} to this function does not typecheck. However, we may
% rescue this situtation by inserting a coercion that extracts the first item
% out of this pair.

% Thus \texttt{show 1} in FI corresponds to \texttt{(fst show) 1} in F.

% While elaborating intersection types, this paper is the first that presents a
% type system that incorporates both parametric polymorphism and intersection
% polymorphism.

% Describe intersection types, encoding records with Intersecion types

% \lstinputlisting[linerange=-]{} % APPLY:linerange=MIXIN_LIB

\paragraph{Subtyping} The previous example exploits a natural
subtyping relation on intersection types. That is the type

\begin{lstlisting}
(Int -> String) & (Bool -> String) 
\end{lstlisting}

\noindent is a \emph{subtype} of both \lstinline{Int -> String} 
and \lstinline{Bool -> String}. This is why \lstinline{show} 
can take \lstinline{100} as its argument.
Generally speaking an intersection type \lstinline{A & B} is
a subtype of both \lstinline{A} and \lstinline{B}. 
Moreove, subtyping of intersection types in \name is purely structural
and it enjoys of properties such as \emph{commutativity} and \emph{associativity}: \\

\noindent {\bf commutativity: } \lstinline{A & B <: B & A}  \\
{\bf associativity:~~~~~~}\lstinline{A & (B & C)  <: (A & B)  & C}  

\paragraph{Covariance and Contravariance}
The subtyping also arises from contravariant parameter types
and covariant return types for functions. 
\bruno{I think this will be a good place to talk about the following material:}
\bruno{Talk about Inheritance is not Subtyping. 
Describe type inheritance and subtyping, show that they don't necessarelly 
go along together in our language. You may need to write some Java code, to 
illustrate differences. \emph{We support contravariant argument types!}
}
\bruno{Related to the previous point, don't forget to mention that 
there are nominal languages, that also separate inheritance from subtyping!
See Klaus Ostermann's paper \& ``Inheritance is not Subtyping''.
}

\george{I think points regarding the designs of type system should prob. be addressed
  somewhere else. The purpose of this section is just introducing the source
  language and preparing the reader for the next section.}

% Subtyping in \name is syntactical and structual.

\subsection{Generalized Records with Intersection Types}

Following Reynolds~\cite{reynolds1997design} and Castagna et
al.~\cite{castagna1995calculus}, \name leverages intersection types to type
extensible records. The idea is that a multi-field record can be encoded as
merges of single-field records, and multi-field record types as intersections.
Therefore in \name, there are only single-field record constructs. 
%The result
%are orthogonal addition to the existing type system and a more general notion of
%records. 

Conventionally, record operations work only on record types. But \name
generalizes them, allowing operations to occur on \emph{any} type. The
reason is that multi-field records in \name do not have a proper
record types. Instead, their types are intersections.

\subsubsection{Record Operations}

To illustrate the various operations on records, we consider a record
with three fields and with the following type:

\begin{lstlisting}
{open : Int, high : Int, low : Int} 
\end{lstlisting}

\noindent Note that this type is just syntactic sugar for:

\begin{lstlisting}
{open : Int} & {high : Int} & {low : Int} 
\end{lstlisting}

\noindent That is a multi-field record type is desugared as
intersections of single-field record types.

\name has three primitive operations related to records: \emph{construction},
\emph{projection}, and \emph{update}. \emph{Extension}, described in many other
record systems, is delegated to the merge operator. Working
with records is type-safe: the type system prevents accessing or updating a
field that does not exist.

\paragraph{Construction} The usual notation for constructing records
\begin{lstlisting}
{open=192, high=195, low=189} 
\end{lstlisting}
is a shorthand for merges of single-field records
\begin{lstlisting}
{open=192} ,, {high=195} ,, {low=189} 
\end{lstlisting}

\paragraph{Projection}
Fields are extracted using the dot notation. For example,
\begin{lstlisting}
{open=192, high=195, low=189}.open
\end{lstlisting}
selects the value of the field labelled \lstinline{open} from the record.

\paragraph{Update}
Functional update allows creating a new record based on an existing one, with
one or more fields replaced. For example, we
can get a new quote with incremented \lstinline{high} with:
\begin{lstlisting}
{open=192, high=195, low=189} with {high=196}
\end{lstlisting}

Refinement of fields is also possible, in the sense
that the type of a new value can be a subtype of that of the old
one.~\footnote{The subtyping restriction is not required for the \name to be
  coherent and it leaves option open for language designers.}
\bruno{Are we going to show an example of this?}

\paragraph{Extension}
Extension, just as construction, is performed with the merge operator
($ \mergeop $). The following, for example, adds the \lstinline{close}
field to the record:
\begin{lstlisting}
{open=192, high=195, low=189} ,, {close=195}
\end{lstlisting}

\paragraph{Generalized Records}
In addition, a record is just a normal term and can be merged with any other
term, for example, the following program is valid:
\begin{lstlisting}
let mixed : Int & {x : Int} = 1 ,, {x = 2};
\end{lstlisting}
and it is still possible to use record operations on
\lstinline{mixed}. That is because a record type of the form $ \recty
l \tau $ can be thought as a normal type $ \tau $ tagged by the label
$ l $. For instance:
\begin{lstlisting}
mixed.x
\end{lstlisting}

\noindent extracts the value of the field \lstinline{x} from \lstinline{mixed}.

\subsubsection{Record Subtyping}

Subtyping of record types supports both width and depth, as one might
expect: \lstinline${x: Int, y: Int}$ is a subtype of
\lstinline${x: Int}$; and if \lstinline$T1$ is a subtype of
\lstinline$T2$, then \lstinline${l: T1}$ is also a subtype of
\lstinline${l: T2} $.

% \bruno{I would call this a labelled type. Record types can be viewed as
% intersections of labelled types.}
% \bruno{Not a proper sentence! }

% \lstinline{e1} and \lstinline{e2} are two expressions that support both
% evaluation and pretty printing and each has type \lstinline{eval : Int, print :
%   String}. \lstinline{add} takes two expressions and computes their
% sum\bruno{Don't inline examples in the text. Give proper separate code
%   examples.}. Note that in order to compute a sum, \lstinline{add} only requires
% that the two expressions support evaluation and hence the type of the parameter
% \lstinline{eval : Int}. As a result, the type of \lstinline{e1} and
% \lstinline{e2} are not exactly the same with that of the parameters of
% \lstinline{add}. However, under a structural type system, this program should
% typecheck anyway because the arguments being passed has more information than
% required. In other words, \lstinline{eval : Int, print : String} is a subtype of
% \lstinline{eval : Int}.

% How is this subtyping relation derived? In \name, multi-field record types are
% excluded from the type system because \lstinline{eval : Int, print : String} can
% be encoded as \lstinline{eval : Int & print : String}. And by one of subtyping
% rules derives that \lstinline{eval : Int & print : String} is a subtype of
% \lstinline{eval : Int}.

% \bruno{Examples illustrating update and elimination of intersections
%   are missing!}

\subsection{\hspace{-5pt}Intersection~Types~and~Parametric~Polymorphism}
\bruno{wondering again whether this should be here or in the next section!}

The combination of intersection types and parametric polymorphism
makes System \name quite expressive. System \name 

In particular this combination
enables an encoding of a simple form of \emph{bounded universal
  quantification}~\cite{cardelli1985understanding}. Therefore instead 
of having built-in support for bounded quantification in the calculus, 
System \name 
This encoding is illustrated next.

%In the same way that System \name extends System $ F $ with
%intersection types, System $ F_{\subtype} $ extends System $ F $ with bounded
%polymorphism. $ F_{\subtype} $~\cite{pierce2002types} allows giving an
%upper bound to the type variable in type abstractions. 

\paragraph{Bounded Quantification}
The idea of bounded universal quantification was discussed in the
seminal paper by Cardelli and Wegner
~\cite{cardelli1985understanding}. They show that bounded quantifiers
are useful because it is able to solve the ``loss of information''
problem.

In fact, the extension of System $ F $ in the other direction, i.e., with
intersection types, is able to address the same problem effectively. Suppose we
have the following definitions:
\begin{lstlisting}{language=scala}
let user = { name = "George", admin = true }
let id(user: {name: String}) = user
\end{lstlisting}
Under a structural type system, programmers would expect that passing the user
to the function is allowed. They are correct. Note that in the source language
multi-field records are just syntatic sugars for merges of single-field records.
Therefore, user is of a subtype of the parameter due to subtyping introduced by
intersection types. So far so good. But there is a problem: what if programmers
wants to access the \texttt{admin} field later, like:
\begin{lstlisting}{language=scala}
(id user).admin
\end{lstlisting}
They cannot do so as the above will not typecheck. After going through the
function, the user now has only the type
\begin{lstlisting}{language=scala}
{name: String}
\end{lstlisting}
This is rather undesired because it indeed has an \texttt{admin} field!

Bounded polymorphism enable the function to return the exact type of the
argument so that we have no problem in accessing the \texttt{admin} field later.
Consider the example below:
\begin{lstlisting}{language=scala}
def id[A <: {name: String}] (user: A) = user
(id [{name: String, admin: Bool}] user).admin
\end{lstlisting}

We do not have bounded polymorphism in the source language. But we can encode
that via intersection types:
\begin{lstlisting}{language=F2J}
let id[A] (user: A & {name: String}) = user in
(id [{admin: Bool}] user).admin
\end{lstlisting}
By requiring the type of the argument to be an intersection type of a type
parameter and the upper bound and passing the type information, we make sure
that we can still access the \lstinline{admin} field later.

% \cite{pierce1997intersection}

% \bruno{I don't think this has been shown. What we can say is: we can encode a
% form of bounded polymorphism with intersection types.}




